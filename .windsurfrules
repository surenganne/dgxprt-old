# Project .windsurfrules
version: 1.0
strict_mode: true

# Project Configuration
project:
  name: "DGXPRT"
  description: "Chemical management system for educational institutions"
  tech_stack:
    primary:
      - "React 18"
      - "TypeScript"
      - "Supabase"
      - "Vite"
    ui:
      - "Shadcn UI"
      - "Radix UI"
      - "Tailwind CSS"
    state:
      - "React Query"
      - "Context API"

# Regional Code Standards
regional_code_standards:
  formatting:
    - "Use provided regional formatters from utils/formatters directory"
    - "Always pass locale to formatting functions"
    - "Handle timezone conversions explicitly"
  
  implementation:
    number_formatting:
      - "Use Intl.NumberFormat with proper locale"
      - "Respect regional decimal/thousand separators"
      - "Format currencies with correct symbols"
    
    date_formatting:
      - "Use date-fns with explicit locale imports"
      - "Store all dates in UTC/ISO format"
      - "Display in user's local timezone"
      - "Use timezone-aware date comparisons"
    
    text_formatting:
      - "Support RTL/LTR text direction"
      - "Use locale-specific collation for sorting"
      - "Handle special characters and diacritics"
    
    measurement_units:
      - "Store measurements in standard units (metric)"
      - "Convert to local units for display"
      - "Include unit conversions in calculations"
    
    currency_handling:
      - "Store amounts in smallest currency unit (cents/pence)"
      - "Use BigDecimal for currency calculations"
      - "Apply locale-specific currency formatting"
    
    forms:
      - "Validate inputs according to regional formats"
      - "Show locale-specific error messages"
      - "Use regional-specific input masks"
    
    accessibility:
      - "Provide locale-specific screen reader text"
      - "Support regional keyboard shortcuts"
      - "Follow regional accessibility guidelines"

  utilities:
    required_functions:
      - "formatDate(date: Date, locale: string): string"
      - "formatCurrency(amount: number, locale: string): string"
      - "formatNumber(number: number, locale: string): string"
      - "formatMeasurement(value: number, unit: string, locale: string): string"
      - "parseLocalDate(dateString: string, locale: string): Date"
      - "parseLocalNumber(numberString: string, locale: string): number"

# Code Organization
directory_structure:
  root:
    src/
    ├── components/        # React components
    │   ├── ui/           # Shadcn/Radix components
    │   ├── shared/       # Shared components
    │   ├── admin/        # Admin interface components
    │   ├── user/         # User interface components
    │   ├── auth/         # Authentication components
    │   └── landing/      # Landing page components
    ├── pages/            # Route pages
    │   ├── admin/        # Admin routes
    │   └── user/         # User routes
    ├── hooks/            # Custom React hooks
    ├── services/         # API services
    ├── integrations/     # Third-party integrations
    ├── types/            # TypeScript types
    └── utils/            # Utility functions

# Data Format Standards
data_formats:
  regional_standards:
    australia:
      date_format: "DD/MM/YYYY"
      time_format: "HH:mm:ss"
      datetime_format: "DD/MM/YYYY HH:mm:ss"
      currency: "AUD"
      currency_symbol: "$"
      decimal_separator: "."
      thousand_separator: ","
      locale: "en-AU"
      timezone: "Australia/Sydney"
    
    new_zealand:
      date_format: "DD/MM/YYYY"
      time_format: "HH:mm:ss"
      datetime_format: "DD/MM/YYYY HH:mm:ss"
      currency: "NZD"
      currency_symbol: "$"
      decimal_separator: "."
      thousand_separator: ","
      locale: "en-NZ"
      timezone: "Pacific/Auckland"
    
    united_kingdom:
      date_format: "DD/MM/YYYY"
      time_format: "HH:mm:ss"
      datetime_format: "DD/MM/YYYY HH:mm:ss"
      currency: "GBP"
      currency_symbol: "£"
      decimal_separator: "."
      thousand_separator: ","
      locale: "en-GB"
      timezone: "Europe/London"
    
    united_states:
      date_format: "MM/DD/YYYY"
      time_format: "hh:mm:ss A"
      datetime_format: "MM/DD/YYYY hh:mm:ss A"
      currency: "USD"
      currency_symbol: "$"
      decimal_separator: "."
      thousand_separator: ","
      locale: "en-US"
      timezone: "America/New_York"
    
    european_union:
      date_format: "DD/MM/YYYY"
      time_format: "HH:mm:ss"
      datetime_format: "DD/MM/YYYY HH:mm:ss"
      currency: "EUR"
      currency_symbol: "€"
      decimal_separator: ","
      thousand_separator: "."
      locale: "en-EU"
      timezone: "Europe/Brussels"
    
    canada:
      date_format: "YYYY-MM-DD"
      time_format: "HH:mm:ss"
      datetime_format: "YYYY-MM-DD HH:mm:ss"
      currency: "CAD"
      currency_symbol: "$"
      decimal_separator: "."
      thousand_separator: ","
      locale: "en-CA"
      timezone: "America/Toronto"

  date:
    display: "DD/MM/YYYY"  # Default format
    iso: "YYYY-MM-DD"      # Storage format
    database: "TIMESTAMP WITH TIME ZONE"
    parsing: "YYYY-MM-DDTHH:mm:ss.sssZ"
  
  numbers:
    decimal_separator: "."
    thousand_separator: ","
    decimal_places: 2
    percentage: "0.00%"
  
  chemical_identifiers:
    cas_number: "^\\d{2,7}-\\d{2}-\\d$"  # Format: XXXXXXX-XX-X
    un_number: "^UN\\d{4}$"              # Format: UNXXXX
  
  measurements:
    weight:
      si: "kg"
      display: "kg"
    volume:
      si: "L"
      display: "L"
    concentration:
      si: "mg/L"
      display: "mg/L"

# Naming Conventions
naming_conventions:
  files:
    components: "^[A-Z][a-zA-Z0-9]+\\.(tsx|ts)$"
    hooks: "^use[A-Z][a-zA-Z0-9]+\\.(ts|tsx)$"
    utils: "^[a-z][a-zA-Z0-9]+\\.(ts|tsx)$"
  
  database:
    tables: "^[a-z_]+$"
    columns: "^[a-z_]+$"
    foreign_keys: "^fk_[a-z_]+$"
    indexes: "^idx_[a-z_]+$"

# Localization Standards
localization_standards:
  structure:
    directory: "src/locales/"
    format: "json"
    naming: "{locale}.json"
  
  implementation:
    - "Use React-Intl for message formatting"
    - "Support dynamic message parameters"
    - "Maintain separate translation files per locale"
    - "Include fallback translations"
  
  required_features:
    - "Locale detection"
    - "Locale switching"
    - "Locale persistence"
    - "RTL/LTR support"
    - "Number formatting"
    - "Date formatting"
    - "Currency formatting"
  
  message_format:
    pattern: "{namespace}.{component}.{messageId}"
    example: "chemical.form.nameLabel"
  
  translation_keys:
    naming: "camelCase"
    namespace_required: true
    description_required: true
  
  date_time:
    storage: "UTC"
    display: "User timezone"
    format: "Regional preference"

# Component Standards
components:
  structure:
    order:
      - "Imports"
      - "Types"
      - "Constants"
      - "Component"
      - "Exports"
  
  rules:
    - "Use functional components exclusively"
    - "Implement proper loading states"
    - "Handle error states gracefully"
    - "Use proper TypeScript types"
    - "Implement proper prop validation"

# Database Standards
database:
  platform: "Supabase"
  schema:
    tables:
      - "profiles"
      - "chemicals"
      - "locations"
      - "user_locations"
      - "chemical_categories"
  
  security:
    - "Implement RLS policies"
    - "Use service roles for admin functions"
    - "Validate data on server side"

# Authentication Standards
authentication:
  provider: "Supabase Auth"
  features:
    - "Magic link authentication"
    - "Email/password authentication"
    - "Password reset functionality"
    - "Session management"
  
  roles:
    - "owner"
    - "admin"
    - "user"

# State Management
state_management:
  server_state: "React Query"
  client_state: "Context API"
  preferences:
    - "Prefer server state over client state"
    - "Use optimistic updates where appropriate"
    - "Implement proper error boundaries"

# Error Handling
error_handling:
  client:
    - "Use error boundaries for component errors"
    - "Implement user-friendly error messages"
    - "Log errors to console in development"
  
  server:
    - "Use structured error responses"
    - "Implement proper error status codes"
    - "Log errors with context information"

# UI Standards
ui:
  theme:
    colors:
      primary: 
        purple: "#895AB7"
        blue: "#00005B"
      background: "#FFFFFF"
      foreground: "#000000"
  
  accessibility:
    - "Implement ARIA labels"
    - "Ensure keyboard navigation"
    - "Maintain color contrast ratios"
    - "Support screen readers"

# Testing Standards
testing:
  unit_tests:
    - "Test hooks independently"
    - "Test utility functions"
    - "Test component logic"
  
  integration_tests:
    - "Test form submissions"
    - "Test authentication flows"
    - "Test data fetching"

# Performance Standards
performance:
  optimization:
    - "Implement proper code splitting"
    - "Use React.memo for expensive renders"
    - "Optimize images and assets"
    - "Implement proper caching strategies"
  
  metrics:
    - "First Contentful Paint < 2s"
    - "Time to Interactive < 3.5s"
    - "Cumulative Layout Shift < 0.1"

# Documentation Standards
documentation:
  code:
    - "Document complex functions"
    - "Document component props"
    - "Document type definitions"
  
  api:
    - "Document API endpoints"
    - "Document request/response formats"
    - "Document error responses"

# Security Standards
security:
  data:
    - "Sanitize user inputs"
    - "Validate data on server"
    - "Implement proper CORS policies"
  
  authentication:
    - "Implement proper session management"
    - "Use secure password reset flows"
    - "Implement proper role-based access"

# Git Standards
git:
  branches:
    main: "production ready code"
    develop: "development branch"
    feature: "feature/*"
    hotfix: "hotfix/*"
  
  commits:
    format: "<type>(<scope>): <description>"
    types:
      - "feat"
      - "fix"
      - "docs"
      - "style"
      - "refactor"
      - "test"
      - "chore"

# Output Configuration
output:
  format: "json"
  fail_on_error: true
  log_level: "INFO"